/*
	Language: juliar
	Type: Module
	Name: ehtml.juliar
	Version: 1.0
	First Published: 4/15/2016
	Creator: Andrei Makhanov
	Official Repository: https://repo.juliar.org
	Official Website: http://juliar.org
	Comment:
	Write Easy HTML simply
*/
function Juliar_ehtml(juliar){
	function convert(t){
		if(t != ""){
				var buffer = "";
				if(t.fulltag != "") buffer += "<"+t.fulltag+">";
				buffer += t.inner;
				if(t.content && t.content.constructor === Array){
						for(var i=0;i<t.content.length;i++){
								buffer += convert(t.content[i]);
						}
				}
				else{
						buffer += (t.content || "");
				}
				if(t.fulltag != "") buffer += "</"+t.tag+">";
				return buffer;
		}
		return "";
    }
        
        
    this.ehtml = function(str){
		var tokens = [];
		var levels = [-1];
		str = str.trim();
		var breaker = 1;
		var structs = str.split(" ");
		
		
		for(var i=0;i<structs.length;i++){
				var str = structs[i].trim();
				if(str == "");
				else if(str == ">"){
						levels[levels.length] = -1;
				}
				else if(str == "^"){
						levels = [levels[0]];
				}
				else if(str == "<"){
						levels.pop();
						levels[levels.length-1] = levels[levels.length-1]+1;
				}
				else{
						var attributes = "";
						_begin = str.indexOf("[");
						_end = str.indexOf("]");
						if(_begin != -1){
								if(_end != -1){
										attributes = str.slice(_begin+1,_end); //Content if contains any
										str = str.slice(0,_begin) + str.slice(_end+1);
								}
								else{
										while(i<structs.length){
												str += " "+structs[++i];
												_end = str.indexOf("]");
												if(_end != -1){
														attributes = str.slice(_begin+1,_end); //Content if contains any
														str = str.slice(0,_begin) + str.slice(_end+1);
														break;
												}
										}
								}
						}             
						if(str.indexOf("]") != -1) return "Error: Extra ] at element " + i + " in section "+structs[i]; 
						if(str.indexOf("[") != -1) return "Error: Extra [ at element " + i + " in section "+structs[i]; 
						
						_begin = str.indexOf("{");
						_end = str.indexOf("}");
						var content = "";
						var id = "";
						
						//test
						if(_begin != -1){
								if(_end != -1){
										content = str.slice(_begin+1,_end); //Content if contains any
										str = str.slice(0,_begin) + str.slice(_end+1);
								}
								else{
										while(i<structs.length){
												str += " "+structs[++i];
												_end = str.indexOf("}");
												if(_end != -1){
														content = str.slice(_begin+1,_end); //Content if contains any
														str = str.slice(0,_begin) + str.slice(_end+1);
														break;
												}
										}
								}
						}             
						if(str.indexOf("}") != -1) return "Error: Extra } at element " + i + " in section "+structs[i]; 
						if(str.indexOf("{") != -1) return "Error: Extra { at element " + i + " in section "+structs[i]; 
						
						if((_begin  = str.indexOf("#")) != -1){
								if(str.indexOf("#",_begin+1) != -1) return "Error: Extra # at element " + i + " in section "+structs[i]; 
								_end = str.indexOf(".",_begin+1);
								if(_end != -1){
										id = ' id="'+str.slice(_begin+1,_end)+'"';
										str = str.slice(0,_begin) + str.slice(_end);
								}
								else{
										id = ' id="'+str.slice(_begin+1)+'"';
										str = str.slice(0,_begin);
								}
						}
						var classNames = [];
						var className = "";
						while((_begin = str.indexOf(".")) != -1){
								_end = str.indexOf(".",_begin+1);
								if(_end != -1){
										className = str.slice(_begin+1,_end);
										str = str.slice(0,_begin) + str.slice(_end);
								}
								else{
										className = str.slice(_begin+1);
										str = str.slice(0,_begin);
								}
								classNames.push(className);
						}
						var classString = "";
						if(classNames.length > 0){
								classString = ' class="'+classNames.join(" ")+'"';
						}
						var fulltag = str;
						fulltag += id;
						fulltag += classString;
						if(attributes != "") fulltag += " "+attributes;
						var fcontent = {"tag":str,"fulltag":fulltag,"content":[], "inner":content};
						if(levels.length == 1){
								levels[levels.length-1] = levels[levels.length-1]+1;
								tokens.push(fcontent);
						}
						else{
								levels[levels.length-1] = levels[levels.length-1]+1;
								var realstr = "";
								for(var j=1;j<=(levels.length-2);j++){
										realstr += ".content["+levels[j]+"]";
								}
								eval("tokens[levels[0]]"+realstr+".content.push(fcontent)");
						}
				}
		}
		var finalk = "";
		for(var k=0;k<tokens.length;k++){
				finalk += convert(tokens[k]);
		}
		return finalk;
	}
}