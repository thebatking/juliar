/*
	Language: juliar
	Type: Module
	Name: experimental.juliar
	Creator: Andrei Makhanov
	Official Repository: https://repo.juliar.org
	Official Website: http://juliar.org
	Comment:
	Contains Experimental Commands that have not been properly tested yet.
*/

function Juliar_experimental(juliar){
	
	//Experimental from IP library
	if(juliar.environment != "web") return "Cannot use this module as environment is not web";
	this.ip = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).query;
	};
	this.zipfromip = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).zip;
	};
	this.zonefromip = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).timezone;
	};
	this.regionfromip = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).regionName;
	};
	this.locationfromip = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).lat +" "+ JSON.parse(xmlhttp.responseText).lon;
	};
	this.countryfromip = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).country;
	};
	this.cityfromip = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).city;
	};
	this.isp = str => {
		var xmlhttp = new XMLHttpRequest();
		xmlhttp.open("GET", "http://ip-api.com/json/"+str, false);
		xmlhttp.send();
		return JSON.parse(xmlhttp.responseText).isp;
	};
	//Experimental Graph Library
	this.graph = (str,args) => {
		//Test of generating x^2
		x_val = [];
		y_val = [];
		for(var i=0;i<1000;i++){
			x_val.push(i);
			y_val.push(i);
		}
		var temp = "";
		temp += '<svg width=500px height=500px viewBox="0 0 1000 1000">';
		temp += '<g>';
		temp += '<line x1="0" y1="500" x2="1000" y2="500" style="stroke:#40454f;stroke-width:2" />';
		temp += '<line x1="500" y1="0" x2="500" y2="1000" style="stroke:#40454f;stroke-width:2" />';
		for(var j=0;j<x_val.length;j++){
			temp += '<circle cx="'+(x_val[j])+'" cy="'+(1000-y_val[j])+'" r="5" stroke="black" stroke-width="1" fill="red" />';
		}
		temp += '</g>';
		temp += '</svg>';
		return temp;
	};
	function caretReplace(a) {
		if (-1 < a.indexOf("^")) {
			for (var c = [];-1 < a.indexOf("(");) {
				a = a.replace(/(\([^\(\)]*\))/g, (a,b) => {
					c.push(b);
					return "___juliar___" + (c.length - 1);
				});
			}
			c.push(a);
			for (a = "___juliar___" + (c.length - 1);-1 < a.indexOf("___juliar___");) {
				a = a.replace(RegExp("___juliar___(\\d+)", "g"), (a,b) => {
					return c[b].replace(/(\w*)\^(\w*)/g, "Math.pow($1,$2)");
				});
			}
		}
		return a;
	};
	this.derivative = (str,args) => {
		var at = Number(args[0]) || 0;
		str =  caretReplace(str.trim().replace(/\\\*/g,"*"));
		var stack = [];
		var output = "";
		str = str.replace(/sin/g,"Math.sin").replace(/cos/g,"Math.cos").replace(/tan/g,"Math.tan").replace(/log/g,"Math.log").replace(/sqrt/g,"Math.sqrt");
		for(var i=0;i<str.length;i++){
			if(str[i] == "x" && ((!isNaN(parseFloat(str[i-1])) && isFinite(str[i-1])) || (str[i-1] >= "A" && str[i-1] <= "Z") || (str[i-1] >= "a" && str[i-1] <="z") || str[i-1] == ")" )){
				str= str.slice(0,i) + "*"+str.slice(i++);
			}
		}
		f1 = str.replace(/x/g,at+0.00000000001);
		f2 = str.replace(/x/g,at);
		return eval("("+f1+"-"+f2+")/0.00000000001");
	};
	function dotproduct(n,r){for(var t=0,u=Math.min(n.length,r.length),e=0;u>e;e++)t+=n[e]*r[e];return t}
	function log(n){return Math.log(n)}function exp(n){return Math.exp(n)}
	function transpose(n){return n[0].map(function(r,t){return n.map(function(r,u){return n[u][t]})})}
	function multiplyMatrices(){var n=Array.prototype.slice.call(arguments,0),r=transpose(n.pop()),t=n.length>1?multiplyMatrices(n):n[0];return t.map(function(n){return r.map(function(r){return r.reduce(function(r,t,u){return r+t*n[u]},0)})})}
	function zeros(n,r){for(var t=[],u=[];r--;)u.push(0);for(;n--;)t.push(u.slice(0));return t}
	function inv(f){if(f.length===f[0].length){var r=0,n=0,o=0,e=f.length,t=0,i=[],g=[];for(r=0;e>r;r+=1)for(i[i.length]=[],g[g.length]=[],o=0;e>o;o+=1)i[r][o]=r==o?1:0,g[r][o]=f[r][o];for(r=0;e>r;r+=1){if(t=g[r][r],0==t){for(n=r+1;e>n;n+=1)if(0!=g[n][r]){for(o=0;e>o;o++)t=g[r][o],g[r][o]=g[n][o],g[n][o]=t,t=i[r][o],i[r][o]=i[n][o],i[n][o]=t;break}if(t=g[r][r],0==t)return}for(o=0;e>o;o++)g[r][o]=g[r][o]/t,i[r][o]=i[r][o]/t;for(n=0;e>n;n++)if(n!=r)for(t=g[n][r],o=0;e>o;o++)g[n][o]-=t*g[r][o],i[n][o]-=t*i[r][o]}return i}}
	function sumMatrices(){for(var r,e,n=arguments,t=[],u=n[0].length,a=n.length,f=0;u>f;){for(r=0,e=0;a>e;)r+=Number(n[e++][f]);t[f++]=r}return t}
	function mean(a){
		var count=0;
		var length = a.length;
		for (var i=a.length; i--;) {
			if(a[i] == null){
				length--;
			}
			else{
				count+=Number(a[i]);
			}
		}
		if(length > 0 ) return count/length;
		return null;
	}
	
	function standardDeviation(a){
		a = a.filter(Number);
		n = a.length;
		var avg = mean(a);
		var squareDiffs = a.map(function(value){
			var diff = value - avg;
			var sqrDiff = diff * diff;
			return sqrDiff;
		});
		var count=0;
		for (var i=squareDiffs.length; i--;) {
			count+=squareDiffs[i];
		}
		var avgSquareDiff = count/(n-1);
		if(isNaN(avgSquareDiff)) return null;
		return Math.sqrt(avgSquareDiff);
	}
	function standarderror(a){
		var x = standardDeviation(a);
		if(x == null) return null;
		return x/Math.sqrt(a.length);
	}
	
	//Experimental DOM library
	this.submit = function(str,args){
		var form = document.createElement("form");
		form.setAttribute("method", "post");
		form.setAttribute("action", str || "");
		for(var i=0, length = args.length; i<length;++i){
			var hiddenField = document.createElement("input");
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", args[i]);
			hiddenField.setAttribute("value", juliar.getobject(args[i]));
			form.appendChild(hiddenField);  
		}
		document.body.appendChild(form);
		form.submit();
		return "";
	}
	/*var eq = str.indexOf("="); //Future?? But doesn't work in current test with picture...
		var space = str.indexOf(" ");
		var command, content,args, t,t1,t2, index1;
		if(eq != -1 && eq < space){
		command = str.substr(0,eq);
		t = str.substr(eq+1).split(",");
		t1 = t.pop(); //t now contains all but one argument, t1 contains 1 arg + content
		if((index1 = t1.indexOf(" ")) != -1){
		t.push(t1.substr(0,index1));
		args = t;
		content = t1.substr(index1+1);
		}
		else{
		content = "";
		args = t.concat(t1);
		}
		}
		else{
		command = str.substr(0,space);
		content = str.substr(space+1);
		args = [];
	}*/
	//NOT FINISHED AND CONVERTED FUNCTIONS
	
	
	///////////////////////////////////////////////////////////////////NOT YET CONVERTED//////////////////////////////////
	
	/*
		function juliar_core_splitwork(str){
		if(window.Worker) {
		var temp = Math.random() * 1000000 |0;
		var w = new Worker("juliar.js");
		w.postMessage(str);
		w.onmessage = function(event) {
		document.getElementsByTagName("juliar_worker_"+temp)[0] = event.data;
		W.terminate();
		};
		return "<juliar_worker_"+temp+"></juliar_worker_"+temp+">";
		}
		return str;
		
		self.addEventListener('message', function(e) {
		self.postMessage(ijuliar_parser(e.data));
		self.close();
		}, false);
		
		}
		
		function juliar_core_figure(str,args){
		var temp = args[0] || null;
		var val = juliar_core_globals["juliar_core_counter_"+str] ?  ++juliar_core_globals["juliar_core_counter_"+str] : juliar_core_globals["juliar_core_counter_"+str] = 1;
		juliar_core_globals[temp] = val;
		return val;
		}
		
		function juliar_core_reference(str){
		return "<span class='superscript'>" + juliar_core_globals[str] + "</span>";
	}*/
	
	////////////////////////////////////////////////////////////////NOT YET FINISHED/////////////////////////////////////
	
	/*function juliar_core_graph(str,args){
		var canvas = document.createElement('canvas');
		canvas.id     = "CursorLayer";
		canvas.width  = 500;
		canvas.height = 768;
		canvas.style.zIndex   = 8;
		canvas.style.position = "absolute";
		canvas.style.border   = "1px solid";
		document.body.appendChild(canvas);
		return "";
	}*/
	
	/*function juliar_core_setmatrix(str,args){ //NOT READY YET!
		var temp = str.split("|");
		var arr = [];
		for(var i=1, length = temp.length; i<length; i+=2){
		arr.push(temp[i].split(" ").filter(function(e){return e != "";}));
		}
		juliar_core_globals[args[0]] = arr;
		return "";
	}*/
	
	/*
		function juliar_core_getmatrix(str){ //NOT READY YET!
		var temp = juliar_core_globals[str];
		var output = "<p style='width:88px;'><span style='float:left;font-size:260px;line-height:230px;'>[</span>";
		//output += "<span style='float:right;font-size:110px;line-height:80px;'>]</span>";
		output += "<div style='padding-top:20px;font-size:20px;line-height:20px;word-spacing:20px'>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "1<br>";
		output += "</div>";
		output += "</p>";
		return output;
		}
	*/
	
	/*
		function juliar_core_loadingbar(str,args){
		var color1 = args[0] || "orange";
		var color2 = args[1] || "orange";
		var background = args[2] || "black";
		var temp = isFinite(String(str)) ? "<span style='width: "+str+"%;background-color: orange;color:black;text-align:center'>"+str+"%</span>" : 
		"<juliar_dynamic_"+str+">"+juliar_core_globals[str]+"</juliar_dynamic_"+str+">";
		return "<div class='progress-bar'>"+temp+"</div>";
		}
		
		function juliar_core_search(str){
		return "<input class='searchable' name='q' type='text' size='40' placeholder='Search...' />";
	}*/
	
	/*function juliar_core_table(str){}
		function juliar_core_slider(str){}
		function juliar_core_tab(str){}
		function juliar_core_theme(str){}
		function juliar_core_menu(str){}
		function juliar_core_slideshow(str){}
	*/
	
	/*
		
		function juliar_core_plusplus(str){
		str.split(" ").forEach(function(element) {
		juliar.getObject(element);
		});
		return "";
		}
		
		function juliar_core_minusminus(str){
		str.split(" ").forEach(function(element) {
		--juliar_core_globals[element];
		});
		return "";
	}*/
	
	/*function ijuliar_pick(str) {
		var temp = str.split(' ')[0];
		var length = temp.length;
		temp = temp.split("=");
		var command = temp[0];
		var args = temp[1] === undefined ? [] : str.slice(++command.length,length).split(",");
		var first = command[0];
		if (first == '+'){ command[1] == '+'? command = "plusplus" : command = "add" + command.slice(1);}
		else if(first == '-'){ command[1] == '-'? command = "minusminus" : command = "subtract" + command.slice(1);}
		else if(first == 'x' && command[1] === undefined) command = "multiply" + command.slice(1);
		else if(first == '/') command = "divide" + command.slice(1);
		else if(first == '^') command = "power" + command.slice(1);
		else if(parseInt(first)) command =  ["zero","one","two","three","four","five","six","seven","eight","nine","ten"][first] + command.slice(1);
		for(var i = 0, len = juliar_core_module.length; i < len;++i) {
		if (typeof window["juliar_"+juliar_core_module[i]+"_"+command] === "function") {
		return window["juliar_"+juliar_core_module[i]+"_"+command](str.substr(length).trim(),args);
		}
		}
		if (typeof window["juliar_core_"+command] === "function") {
		return window["juliar_core_"+command](str.substr(length).trim(),args);
		}
		return "Unknown command " +str;
	}*/
	
	/*function ijuliar_keydown(e) {
		var keyCode = e.keyCode;
		var target = e.target;
		if (keyCode === 13) {
		var str = target.value;
		juliar_core_history_arr.unshift(str);
		juliar_core_history_index = 0;
		var temp = document.createElement("div");
		temp.innerHTML = ijuliar_parser(str);
		target.parentNode.insertBefore(temp, target);
		target.value = "";
		var event = new Event('juliar_done');
		document.dispatchEvent(event);
		}
		else if (keyCode === 38) {
		if (juliar_core_history_arr.length !== 0) {
		if (juliar_core_history_index === juliar_core_history_arr.length) {
		juliar_core_history_index = 0;
		}
		target.value = juliar_core_history_arr[juliar_core_history_index];
		juliar_core_history_index += 1;
		}
		}
		else if (keyCode === 40) {
		if (juliar_core_history_arr.length !== 0) {
		if (juliar_core_history_index === -1) {
		juliar_core_history_index = juliar_core_history_arr.length - 1;
		}
		target.value = juliar_core_history_arr[juliar_core_history_index];
		juliar_core_history_index -= 1;
		}
		}
		}
		
		function ijuliar_interpreter() {
		var ijuliars = document.getElementsByTagName("ijuliar");
		for (var i = 0, juliar = ijuliars.length; i < juliar; i++) {
		var jselector = ijuliars[i];
		jselector.innerHTML = "<br><input type='text' style='width: 600px;border-top: 0;border-right: 0;border-left: 0;background: transparent;border-color:rgba(0,0,0,0.3);'>";
		jselector.addEventListener("keydown", ijuliar_keydown);
		}
	}*/                                 
	
}