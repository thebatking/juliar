*************** static const char rcsid[] = "$Id: cgi-fcgi.c,v 1.20 2009/10/06 01:31:59 robs Exp
*** 33,38 ****
  #define environ (*_NSGetEnviron())
  #else
  extern char **environ;
  #endif
  
  #ifdef HAVE_SYS_PARAM_H
--- 33,40 ----
  #define environ (*_NSGetEnviron())
  #else
  extern char **environ;
+ #include <stdint.h>
+ #include <limits.h>
  #endif
  
  #ifdef HAVE_SYS_PARAM_H
*************** extern char **environ;
*** 52,57 ****
  #include "fastcgi.h"
  #include "fcgios.h"
  
  
  static int wsReadPending = 0;
  static int fcgiReadPending = 0;
--- 54,64 ----
  #include "fastcgi.h"
  #include "fcgios.h"
  
+ #ifdef _WIN32
+ #define ACCESS _access
+ #else
+ #define ACCESS access
+ #endif
  
  static int wsReadPending = 0;
  static int fcgiReadPending = 0;
*************** typedef struct {
*** 86,93 ****
  static int GetPtr(char **ptr, int n, Buffer *pBuf)
  {
      int result;
      *ptr = pBuf->next;
-     result = min(n, pBuf->stop - pBuf->next);
      pBuf->next += result;
      return result;
  }
--- 93,103 ----
  static int GetPtr(char **ptr, int n, Buffer *pBuf)
  {
      int result;
+     intptr_t ptrDiff;
      *ptr = pBuf->next;
+     ptrDiff = pBuf->stop - pBuf->next;
+     ASSERT(0 <= ptrDiff && ptrDiff <= INT_MAX);
+     result = min(n, (int)ptrDiff);
      pBuf->next += result;
      return result;
  }
*************** static void AppServerReadHandler(ClientData dc, int bytesRead)
*** 220,226 ****
      /* Touch unused parameters to avoid warnings */
      dc = NULL;
  
-     assert(fcgiReadPending == TRUE);
      fcgiReadPending = FALSE;
      count = bytesRead;
  
--- 230,236 ----
      /* Touch unused parameters to avoid warnings */
      dc = NULL;
  
+     ASSERT(fcgiReadPending == TRUE);
      fcgiReadPending = FALSE;
      count = bytesRead;
  
*************** static void AppServerReadHandler(ClientData dc, int bytesRead)
*** 250,256 ****
               * First priority is to complete the header.
               */
              count = GetPtr(&ptr, sizeof(header) - headerLen, &fromAS);
-             assert(count > 0);
              memcpy(&header + headerLen, ptr, count);
              headerLen += count;
              if(headerLen < sizeof(header)) {
--- 260,266 ----
               * First priority is to complete the header.
               */
              count = GetPtr(&ptr, sizeof(header) - headerLen, &fromAS);
+             ASSERT(count > 0);
              memcpy(&header + headerLen, ptr, count);
              headerLen += count;
              if(headerLen < sizeof(header)) {
*************** static void WebServerReadHandler(ClientData dc, int bytesRead)
*** 378,386 ****
      /* Touch unused parameters to avoid warnings */
      dc = NULL;
  
-     assert(fromWS.next == fromWS.stop);
-     assert(fromWS.next == &fromWS.buff[0]);
-     assert(wsReadPending == TRUE);
      wsReadPending = FALSE;
  
      if(bytesRead < 0) {
--- 388,396 ----
      /* Touch unused parameters to avoid warnings */
      dc = NULL;
  
+     ASSERT(fromWS.next == fromWS.stop);
+     ASSERT(fromWS.next == &fromWS.buff[0]);
+     ASSERT(wsReadPending == TRUE);
      wsReadPending = FALSE;
  
      if(bytesRead < 0) {
*************** static void WebServerReadHandler(ClientData dc, int bytesRead)
*** 412,424 ****
  
  static void AppServerWriteHandler(ClientData dc, int bytesWritten)
  {
-     int length = fromWS.stop - fromWS.next;
  
      /* Touch unused parameters to avoid warnings */
      dc = NULL;
  
-     assert(length > 0);
-     assert(fcgiWritePending == TRUE);
  
      fcgiWritePending = FALSE;
      if(bytesWritten < 0) {
--- 422,434 ----
  
  static void AppServerWriteHandler(ClientData dc, int bytesWritten)
  {
+     intptr_t length = fromWS.stop - fromWS.next;
  
      /* Touch unused parameters to avoid warnings */
      dc = NULL;
  
+     ASSERT(length > 0);
+     ASSERT(fcgiWritePending == TRUE);
  
      fcgiWritePending = FALSE;
      if(bytesWritten < 0) {
*************** static void AppServerWriteHandler(ClientData dc, int bytesWritten)
*** 449,464 ****
   */
  static void ScheduleIo(void)
  {
-     int length;
  
      /*
       * Move data between standard in and the FastCGI connection.
       */
      if(!fcgiWritePending && appServerSock != -1 &&
-        ((length = fromWS.stop - fromWS.next) != 0)) {
- 	if(OS_AsyncWrite(appServerSock, 0, fromWS.next, length,
  			 AppServerWriteHandler,
- 			 (ClientData)appServerSock) == -1) {
  	    FCGIexit(OS_Errno);
  	} else {
  	    fcgiWritePending = TRUE;
--- 459,476 ----
   */
  static void ScheduleIo(void)
  {
+     intptr_t length;
  
      /*
       * Move data between standard in and the FastCGI connection.
       */
+     length = fromWS.stop - fromWS.next;
      if(!fcgiWritePending && appServerSock != -1 &&
+        (length != 0)) {
+         ASSERT(0 <= length && length <= INT_MAX);
+         if(OS_AsyncWrite(appServerSock, 0, fromWS.next, (int)length,
  			 AppServerWriteHandler,
+                          (ClientData)(intptr_t)appServerSock) == -1) {
  	    FCGIexit(OS_Errno);
  	} else {
  	    fcgiWritePending = TRUE;
*************** static void ScheduleIo(void)
*** 474,480 ****
  
  	if(OS_AsyncRead(appServerSock, 0, fromAS.next, BUFFLEN,
  			AppServerReadHandler,
- 			(ClientData)appServerSock) == -1) {
  	    FCGIexit(OS_Errno);
  	} else {
  	    fcgiReadPending = TRUE;
--- 486,492 ----
  
  	if(OS_AsyncRead(appServerSock, 0, fromAS.next, BUFFLEN,
  			AppServerReadHandler,
+                         (ClientData)(intptr_t)appServerSock) == -1) {
  	    FCGIexit(OS_Errno);
  	} else {
  	    fcgiReadPending = TRUE;
*************** static void FCGI_Start(char *bindPath, char *appPath, int nServers)
*** 518,524 ****
          exit(OS_Errno);
      }
  
-     if(access(appPath, X_OK) == -1) {
  	fprintf(stderr, "%s is not executable\n", appPath);
  	exit(1);
      }
--- 530,536 ----
          exit(OS_Errno);
      }
  
+     if(ACCESS(appPath, X_OK) == -1) {
  	fprintf(stderr, "%s is not executable\n", appPath);
  	exit(1);
      }
*************** static void FCGIUtil_BuildNameValueHeader(
*** 556,561 ****
          unsigned char *headerBuffPtr,
          int *headerLenPtr) {
      unsigned char *startHeaderBuffPtr = headerBuffPtr;
  
      ASSERT(nameLen >= 0);
      if (nameLen < 0x80) {
--- 568,574 ----
          unsigned char *headerBuffPtr,
          int *headerLenPtr) {
      unsigned char *startHeaderBuffPtr = headerBuffPtr;
+     intptr_t ptrDiff;
  
      ASSERT(nameLen >= 0);
      if (nameLen < 0x80) {
*************** static void FCGIUtil_BuildNameValueHeader(
*** 575,581 ****
          *headerBuffPtr++ = (unsigned char) (valueLen >> 8);
          *headerBuffPtr++ = (unsigned char) valueLen;
      }
-     *headerLenPtr = headerBuffPtr - startHeaderBuffPtr;
  }
  
  
--- 588,596 ----
          *headerBuffPtr++ = (unsigned char) (valueLen >> 8);
          *headerBuffPtr++ = (unsigned char) valueLen;
      }
+     ptrDiff = headerBuffPtr - startHeaderBuffPtr;
+     ASSERT(0 <= ptrDiff && ptrDiff <= INT_MAX);
+     *headerLenPtr = (int)ptrDiff;
  }
  
  
*************** static int ParseArgs(int argc, char *argv[],
*** 640,646 ****
  			}
  			if((av[ac] = (char *) malloc(strlen(tp1) + 1)) == NULL) {
  			    fprintf(stderr, "Cannot allocate %d bytes\n",
- 				    strlen(tp1)+1);
  			    exit(-1);
  			}
  			strcpy(av[ac++], tp1);
--- 655,661 ----
  			}
  			if((av[ac] = (char *) malloc(strlen(tp1) + 1)) == NULL) {
  			    fprintf(stderr, "Cannot allocate %d bytes\n",
+ 				    (int) strlen(tp1)+1);
  			    exit(-1);
  			}
  			strcpy(av[ac++], tp1);
*************** static int ParseArgs(int argc, char *argv[],
*** 659,665 ****
  	    } else if (!strcmp(argv[i], "-jitcgi")) {
  	        DebugBreak();
  	    } else if (!strcmp(argv[i], "-dbgfcgi")) {
- 	        putenv("DEBUG_FCGI=TRUE");
  #endif
  	    } else if(!strcmp(argv[i], "-start")) {
  		*doBindPtr = FALSE;
--- 674,680 ----
  	    } else if (!strcmp(argv[i], "-jitcgi")) {
  	        DebugBreak();
  	    } else if (!strcmp(argv[i], "-dbgfcgi")) {
+                 _putenv("DEBUG_FCGI=TRUE");
  #endif
  	    } else if(!strcmp(argv[i], "-start")) {
  		*doBindPtr = FALSE;
*************** int main(int argc, char **argv)
*** 740,750 ****
      FCGX_Stream *paramsStream;
      int numFDs;
      unsigned char headerBuff[8];
-     int headerLen, valueLen;
      char *equalPtr;
      FCGI_BeginRequestRecord beginRecord;
      int	doBind, doStart, nServers;
      char appPath[MAXPATHLEN], bindPath[MAXPATHLEN];
  
      if(ParseArgs(argc, argv, &doBind, &doStart,
  		   (char *) &bindPath, (char *) &appPath, &nServers)) {
--- 755,767 ----
      FCGX_Stream *paramsStream;
      int numFDs;
      unsigned char headerBuff[8];
+     int headerLen;
+     intptr_t valueLen;
      char *equalPtr;
      FCGI_BeginRequestRecord beginRecord;
      int	doBind, doStart, nServers;
      char appPath[MAXPATHLEN], bindPath[MAXPATHLEN];
+     intptr_t ptrDiff;
  
      if(ParseArgs(argc, argv, &doBind, &doStart,
  		   (char *) &bindPath, (char *) &appPath, &nServers)) {
*************** int main(int argc, char **argv)
*** 819,832 ****
              exit(1000);
          }
          valueLen = strlen(equalPtr + 1);
          FCGIUtil_BuildNameValueHeader(
-                 equalPtr - *envp,
-                 valueLen,
                  &headerBuff[0],
                  &headerLen);
          if(FCGX_PutStr((char *) &headerBuff[0], headerLen, paramsStream) < 0
-                 || FCGX_PutStr(*envp, equalPtr - *envp, paramsStream) < 0
-                 || FCGX_PutStr(equalPtr + 1, valueLen, paramsStream) < 0) {
              exit(FCGX_GetError(paramsStream));
          }
      }
--- 836,852 ----
              exit(1000);
          }
          valueLen = strlen(equalPtr + 1);
+         ASSERT(0 <= valueLen && valueLen <= INT_MAX);
+         ptrDiff = equalPtr - *envp;
+         ASSERT(0 <= ptrDiff && ptrDiff < INT_MAX);
          FCGIUtil_BuildNameValueHeader(
+             (int)ptrDiff,
+             (int)valueLen,
                  &headerBuff[0],
                  &headerLen);
          if(FCGX_PutStr((char *) &headerBuff[0], headerLen, paramsStream) < 0
+            || FCGX_PutStr(*envp, (int)ptrDiff, paramsStream) < 0
+            || FCGX_PutStr(equalPtr + 1, (int)valueLen, paramsStream) < 0) {
              exit(FCGX_GetError(paramsStream));
          }
      }
