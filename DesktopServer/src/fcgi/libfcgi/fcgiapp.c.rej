*************** static const char rcsid[] = "$Id: fcgiapp.c,v 1.35 2003/06/22 00:16:43 robs Exp
*** 24,29 ****
  #include <stdlib.h>
  #include <string.h>
  #include <sys/types.h>
  
  #ifndef _WIN32
  #include <stdint.h>
--- 24,33 ----
  #include <stdlib.h>
  #include <string.h>
  #include <sys/types.h>
+ #ifndef _WIN32
+ #include <stdint.h>
+ #include <limits.h>
+ #endif
  
  #ifndef _WIN32
  #include <stdint.h>
*************** static const char rcsid[] = "$Id: fcgiapp.c,v 1.35 2003/06/22 00:16:43 robs Exp
*** 67,72 ****
  #define LONG_DOUBLE long double
  #endif
  
  /*
   * Globals
   */
--- 71,82 ----
  #define LONG_DOUBLE long double
  #endif
  
+ #ifdef _WIN64
+ #define ABS(a) _abs64(a)
+ #else
+ #define ABS(a) abs(a)
+ #endif
+ 
  /*
   * Globals
   */
*************** static void *Malloc(size_t size)
*** 89,95 ****
  
  static char *StringCopy(char *str)
  {
-     int strLen = strlen(str);
      char *newString = (char *)Malloc(strLen + 1);
      memcpy(newString, str, strLen);
      newString[strLen] = '\000';
--- 99,105 ----
  
  static char *StringCopy(char *str)
  {
+     size_t strLen = strlen(str);
      char *newString = (char *)Malloc(strLen + 1);
      memcpy(newString, str, strLen);
      newString[strLen] = '\000';
*************** int FCGX_GetChar(FCGX_Stream *stream)
*** 146,152 ****
   */
  int FCGX_GetStr(char *str, int n, FCGX_Stream *stream)
  {
-     int m, bytesMoved;
  
      if (stream->isClosed || ! stream->isReader || n <= 0) {
          return 0;
--- 156,162 ----
   */
  int FCGX_GetStr(char *str, int n, FCGX_Stream *stream)
  {
+     intptr_t m, bytesMoved;
  
      if (stream->isClosed || ! stream->isReader || n <= 0) {
          return 0;
*************** int FCGX_GetStr(char *str, int n, FCGX_Stream *stream)
*** 170,184 ****
              memcpy(str, stream->rdNext, m);
              bytesMoved += m;
              stream->rdNext += m;
-             if(bytesMoved == n)
-                 return bytesMoved;
              str += m;
          }
-         if(stream->isClosed || !stream->isReader)
-             return bytesMoved;
          stream->fillBuffProc(stream);
-         if (stream->isClosed)
-             return bytesMoved;
  
          stream->stopUnget = stream->rdNext;
      }
--- 180,200 ----
              memcpy(str, stream->rdNext, m);
              bytesMoved += m;
              stream->rdNext += m;
+             if(bytesMoved == n) {
+                 ASSERT(INT_MIN <= bytesMoved && bytesMoved <= INT_MAX);
+                 return (int)bytesMoved;
+             }
              str += m;
          }
+         if(stream->isClosed || !stream->isReader) {
+             ASSERT(INT_MIN <= bytesMoved && bytesMoved <= INT_MAX);
+             return (int)bytesMoved;
+         }
          stream->fillBuffProc(stream);
+         if (stream->isClosed) {
+             ASSERT(INT_MIN <= bytesMoved && bytesMoved <= INT_MAX);
+             return (int)bytesMoved;
+         }
  
          stream->stopUnget = stream->rdNext;
      }
*************** int FCGX_PutChar(int c, FCGX_Stream *stream)
*** 313,319 ****
   */
  int FCGX_PutStr(const char *str, int n, FCGX_Stream *stream)
  {
-     int m, bytesMoved;
  
      /*
       * Fast path: room for n bytes in the buffer
--- 329,335 ----
   */
  int FCGX_PutStr(const char *str, int n, FCGX_Stream *stream)
  {
+     intptr_t m, bytesMoved;
  
      /*
       * Fast path: room for n bytes in the buffer
*************** int FCGX_PutStr(const char *str, int n, FCGX_Stream *stream)
*** 334,341 ****
              memcpy(stream->wrNext, str, m);
              bytesMoved += m;
              stream->wrNext += m;
-             if(bytesMoved == n)
-                 return bytesMoved;
              str += m;
  	}
          if(stream->isClosed || stream->isReader)
--- 350,359 ----
              memcpy(stream->wrNext, str, m);
              bytesMoved += m;
              stream->wrNext += m;
+             if(bytesMoved == n) {
+                 ASSERT(INT_MIN <= bytesMoved && bytesMoved <= INT_MAX);
+                 return (int)bytesMoved;
+             }
              str += m;
  	}
          if(stream->isClosed || stream->isReader)
*************** int FCGX_PutStr(const char *str, int n, FCGX_Stream *stream)
*** 359,365 ****
   */
  int FCGX_PutS(const char *str, FCGX_Stream *stream)
  {
-     return FCGX_PutStr(str, strlen(str), stream);
  }
  
  /*
--- 377,385 ----
   */
  int FCGX_PutS(const char *str, FCGX_Stream *stream)
  {
+     size_t sz = strlen(str);
+     ASSERT(sz <= INT_MAX);
+     return FCGX_PutStr(str, (int)sz, stream);
  }
  
  /*
*************** int FCGX_FPrintF(FCGX_Stream *stream, const char *format, ...)
*** 410,424 ****
      /*
       * Max size of a format specifier is 1 + 5 + 7 + 7 + 2 + 1 + slop
       */
- static void CopyAndAdvance(char **destPtr, char **srcPtr, int n);
  
  int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
  {
      char *f, *fStop, *percentPtr, *p, *fmtBuffPtr, *buffPtr;
-     int op, performedOp, sizeModifier, buffCount = 0, buffLen, specifierLength;
-     int fastPath, n, auxBuffLen = 0, buffReqd, minWidth, precision, exp;
      char *auxBuffPtr = NULL;
-     int streamCount = 0;
      char fmtBuff[FMT_BUFFLEN];
      char buff[PRINTF_BUFFLEN];
  
--- 430,446 ----
      /*
       * Max size of a format specifier is 1 + 5 + 7 + 7 + 2 + 1 + slop
       */
+ static void CopyAndAdvance(char **destPtr, char **srcPtr, intptr_t n);
  
  int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
  {
      char *f, *fStop, *percentPtr, *p, *fmtBuffPtr, *buffPtr;
+     intptr_t op, performedOp, sizeModifier, buffCount = 0, buffLen;
+     intptr_t fastPath, n, auxBuffLen = 0, minWidth, precision;
+     int exp;
+     intptr_t specifierLength, buffReqd;
      char *auxBuffPtr = NULL;
+     intptr_t streamCount = 0;
      char fmtBuff[FMT_BUFFLEN];
      char buff[PRINTF_BUFFLEN];
  
*************** int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
*** 443,451 ****
          percentPtr = (char *)memchr(f, '%', fStop - f);
          if(percentPtr == NULL) percentPtr = fStop;
          if(percentPtr != f) {
-             if(FCGX_PutStr(f, percentPtr - f, stream) < 0)
                  goto ErrorReturn;
-             streamCount += percentPtr - f;
              f = percentPtr;
              if(f == fStop) break;
  	}
--- 465,475 ----
          percentPtr = (char *)memchr(f, '%', fStop - f);
          if(percentPtr == NULL) percentPtr = fStop;
          if(percentPtr != f) {
+             intptr_t ptrDiff = percentPtr - f;
+             ASSERT(0 <= ptrDiff && ptrDiff < INT_MAX);
+             if(FCGX_PutStr(f, (int)ptrDiff, stream) < 0)
                  goto ErrorReturn;
+             streamCount += (int)ptrDiff;
              f = percentPtr;
              if(f == fStop) break;
  	}
*************** int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
*** 510,523 ****
                  if(n == 0) {
                      if(*p == '*') {
                          minWidth = va_arg(arg, int);
-                         if(abs(minWidth) > 999999)
                              goto ErrorReturn;
  			/*
  			 * The following use of strlen rather than the
  			 * value returned from sprintf is because SUNOS4
  			 * returns a char * instead of an int count.
  			 */
- 			sprintf(fmtBuffPtr, "%d", minWidth);
                          fmtBuffPtr += strlen(fmtBuffPtr);
                          p++;
  	            } else {
--- 534,547 ----
                  if(n == 0) {
                      if(*p == '*') {
                          minWidth = va_arg(arg, int);
+                         if(ABS(minWidth) > 999999)
                              goto ErrorReturn;
  			/*
  			 * The following use of strlen rather than the
  			 * value returned from sprintf is because SUNOS4
  			 * returns a char * instead of an int count.
  			 */
+                         sprintf(fmtBuffPtr, "%lld", (long long)minWidth);
                          fmtBuffPtr += strlen(fmtBuffPtr);
                          p++;
  	            } else {
*************** int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
*** 546,552 ****
  			 * value returned from sprintf is because SUNOS4
  			 * returns a char * instead of an int count.
  			 */
- 			    sprintf(fmtBuffPtr, "%d", precision);
  			    fmtBuffPtr += strlen(fmtBuffPtr);
                              p++;
  	                } else {
--- 570,576 ----
  			 * value returned from sprintf is because SUNOS4
  			 * returns a char * instead of an int count.
  			 */
+                             sprintf(fmtBuffPtr, "%lld", (long long)precision);
  			    fmtBuffPtr += strlen(fmtBuffPtr);
                              p++;
  	                } else {
*************** int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
*** 768,778 ****
                      switch(sizeModifier) {
                          case ' ':
                              intPtrArg = va_arg(arg, int *);
-                             *intPtrArg = streamCount;
                              break;
                          case 'l':
                              longPtrArg = va_arg(arg, long *);
-                             *longPtrArg = streamCount;
                              break;
                          case 'h':
                              shortPtrArg = (short *) va_arg(arg, short *);
--- 792,804 ----
                      switch(sizeModifier) {
                          case ' ':
                              intPtrArg = va_arg(arg, int *);
+                     ASSERT(INT_MIN <= streamCount && streamCount <= INT_MAX);
+                     *intPtrArg = (int)streamCount;
                              break;
                          case 'l':
                              longPtrArg = va_arg(arg, long *);
+                     ASSERT(LONG_MIN <= streamCount && streamCount <= LONG_MAX);
+                     *longPtrArg = (long)streamCount;
                              break;
                          case 'h':
                              shortPtrArg = (short *) va_arg(arg, short *);
*************** int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
*** 839,845 ****
          } /* for (;;) */
          ASSERT(buffCount < buffLen);
          if(buffCount > 0) {
-             if(FCGX_PutStr(buffPtr, buffCount, stream) < 0)
                  goto ErrorReturn;
              streamCount += buffCount;
          } else if(buffCount < 0) {
--- 865,872 ----
          } /* for (;;) */
          ASSERT(buffCount < buffLen);
          if(buffCount > 0) {
+             ASSERT(0 <= buffCount && buffCount <= INT_MAX);
+             if(FCGX_PutStr(buffPtr, (int)buffCount, stream) < 0)
                  goto ErrorReturn;
              streamCount += buffCount;
          } else if(buffCount < 0) {
*************** int FCGX_VFPrintF(FCGX_Stream *stream, const char *format, va_list arg)
*** 852,869 ****
      streamCount = -1;
    NormalReturn:
      if(auxBuffPtr != NULL) free(auxBuffPtr);
-     return streamCount;
  }
  
  /*
   * Copy n characters from *srcPtr to *destPtr, then increment
   * both *srcPtr and *destPtr by n.
   */
- static void CopyAndAdvance(char **destPtr, char **srcPtr, int n)
  {
      char *dest = *destPtr;
      char *src = *srcPtr;
-     int i;
      for (i = 0; i < n; i++)
          *dest++ = *src++;
      *destPtr = dest;
--- 879,897 ----
      streamCount = -1;
    NormalReturn:
      if(auxBuffPtr != NULL) free(auxBuffPtr);
+     ASSERT(INT_MIN <= streamCount && streamCount <= INT_MAX);
+     return (int)streamCount;
  }
  
  /*
   * Copy n characters from *srcPtr to *destPtr, then increment
   * both *srcPtr and *destPtr by n.
   */
+ static void CopyAndAdvance(char **destPtr, char **srcPtr, intptr_t n)
  {
      char *dest = *destPtr;
      char *src = *srcPtr;
+     intptr_t i;
      for (i = 0; i < n; i++)
          *dest++ = *src++;
      *destPtr = dest;
*************** static void FreeParams(ParamsPtr *paramsPtrPtr)
*** 1079,1085 ****
   */
  static void PutParam(ParamsPtr paramsPtr, char *nameValue)
  {
-     int size;
  
      *paramsPtr->cur++ = nameValue;
      size = paramsPtr->cur - paramsPtr->vec;
--- 1107,1113 ----
   */
  static void PutParam(ParamsPtr paramsPtr, char *nameValue)
  {
+     intptr_t size;
  
      *paramsPtr->cur++ = nameValue;
      size = paramsPtr->cur - paramsPtr->vec;
*************** static void PutParam(ParamsPtr paramsPtr, char *nameValue)
*** 1106,1112 ****
   */
  char *FCGX_GetParam(const char *name, FCGX_ParamArray envp)
  {
-     int len;
      char **p;
  
  	if (name == NULL || envp == NULL) return NULL;
--- 1134,1140 ----
   */
  char *FCGX_GetParam(const char *name, FCGX_ParamArray envp)
  {
+     intptr_t len;
      char **p;
  
  	if (name == NULL || envp == NULL) return NULL;
*************** static void WriteCloseRecords(struct FCGX_Stream *stream)
*** 1361,1369 ****
  
  
  
- static int write_it_all(int fd, char *buf, int len)
  {
-     int wrote;
  
      while (len) {
          wrote = OS_Write(fd, buf, len);
--- 1389,1397 ----
  
  
  
+ static intptr_t write_it_all(int fd, char *buf, intptr_t len)
  {
+     intptr_t wrote;
  
      while (len) {
          wrote = OS_Write(fd, buf, len);
*************** static int write_it_all(int fd, char *buf, int len)
*** 1388,1394 ****
  static void EmptyBuffProc(struct FCGX_Stream *stream, int doClose)
  {
      FCGX_Stream_Data *data = (FCGX_Stream_Data *)stream->data;
-     int cLen, eLen;
      /*
       * If the buffer contains stream data, fill in the header.
       * Pad the record to a multiple of 8 bytes in length.  Padding
--- 1416,1422 ----
  static void EmptyBuffProc(struct FCGX_Stream *stream, int doClose)
  {
      FCGX_Stream_Data *data = (FCGX_Stream_Data *)stream->data;
+     intptr_t cLen, eLen;
      /*
       * If the buffer contains stream data, fill in the header.
       * Pad the record to a multiple of 8 bytes in length.  Padding
*************** static void EmptyBuffProc(struct FCGX_Stream *stream, int doClose)
*** 1405,1413 ****
               */
              memset(stream->wrNext, 0, eLen - cLen);
              stream->wrNext += eLen - cLen;
              *((FCGI_Header *) data->buff)
                      = MakeHeader(data->type,
-                             data->reqDataPtr->requestId, cLen, eLen - cLen);
          } else {
              stream->wrNext = data->buff;
  	}
--- 1433,1443 ----
               */
              memset(stream->wrNext, 0, eLen - cLen);
              stream->wrNext += eLen - cLen;
+             ASSERT(0 <= cLen && cLen <= INT_MAX);
+             ASSERT(0 <= eLen - cLen && eLen - cLen <= INT_MAX);
              *((FCGI_Header *) data->buff)
                      = MakeHeader(data->type,
+                              data->reqDataPtr->requestId, (int)cLen, (int)(eLen - cLen));
          } else {
              stream->wrNext = data->buff;
  	}
*************** static int ProcessManagementRecord(int type, FCGX_Stream *stream)
*** 1461,1467 ****
      char response[64]; /* 64 = 8 + 3*(1+1+14+1)* + padding */
      char *responseP = &response[FCGI_HEADER_LEN];
      char *name, value = '\0';
-     int len, paddedLen;
      if(type == FCGI_GET_VALUES) {
          ReadParams(paramsPtr, stream);
          if((FCGX_GetError(stream) != 0) || (data->contentLen != 0)) {
--- 1491,1497 ----
      char response[64]; /* 64 = 8 + 3*(1+1+14+1)* + padding */
      char *responseP = &response[FCGI_HEADER_LEN];
      char *name, value = '\0';
+     intptr_t len, paddedLen;
      if(type == FCGI_GET_VALUES) {
          ReadParams(paramsPtr, stream);
          if((FCGX_GetError(stream) != 0) || (data->contentLen != 0)) {
*************** static int ProcessManagementRecord(int type, FCGX_Stream *stream)
*** 1482,1502 ****
              }
              if(name != NULL) {
                  len = strlen(name);
-                 sprintf(responseP, "%c%c%s%c", len, 1, name, value);
                  responseP += len + 3;
  	    }
          }
          len = responseP - &response[FCGI_HEADER_LEN];
          paddedLen = AlignInt8(len);
          *((FCGI_Header *) response)
              = MakeHeader(FCGI_GET_VALUES_RESULT, FCGI_NULL_REQUEST_ID,
-                          len, paddedLen - len);
          FreeParams(&paramsPtr);
      } else {
          paddedLen = len = sizeof(FCGI_UnknownTypeBody);
          ((FCGI_UnknownTypeRecord *) response)->header
              = MakeHeader(FCGI_UNKNOWN_TYPE, FCGI_NULL_REQUEST_ID,
-                          len, 0);
          ((FCGI_UnknownTypeRecord *) response)->body
              = MakeUnknownTypeBody(type);
      }
--- 1512,1535 ----
              }
              if(name != NULL) {
                  len = strlen(name);
+                 sprintf(responseP, "%c%c%s%c", (int)len, 1, name, value);
                  responseP += len + 3;
  	    }
          }
          len = responseP - &response[FCGI_HEADER_LEN];
          paddedLen = AlignInt8(len);
+         ASSERT(0 <= len && len <= INT_MAX);
+         ASSERT(0 <= paddedLen - len && paddedLen - len <= INT_MAX);
          *((FCGI_Header *) response)
              = MakeHeader(FCGI_GET_VALUES_RESULT, FCGI_NULL_REQUEST_ID,
+                          (int)len, (int)(paddedLen - len));
          FreeParams(&paramsPtr);
      } else {
          paddedLen = len = sizeof(FCGI_UnknownTypeBody);
+         ASSERT(0 <= len && len <= INT_MAX);
          ((FCGI_UnknownTypeRecord *) response)->header
              = MakeHeader(FCGI_UNKNOWN_TYPE, FCGI_NULL_REQUEST_ID,
+                          (int)len, 0);
          ((FCGI_UnknownTypeRecord *) response)->body
              = MakeUnknownTypeBody(type);
      }
*************** static void FillBuffProc(FCGX_Stream *stream)
*** 1629,1634 ****
      FCGI_Header header;
      int headerLen = 0;
      int status, count;
  
      for (;;) {
          /*
--- 1662,1668 ----
      FCGI_Header header;
      int headerLen = 0;
      int status, count;
+     intptr_t ptrDiff;
  
      for (;;) {
          /*
*************** static void FillBuffProc(FCGX_Stream *stream)
*** 1649,1655 ****
           * more content bytes, deliver all that are present in data->buff.
           */
          if(data->contentLen > 0) {
-             count = min(data->contentLen, data->buffStop - stream->rdNext);
              data->contentLen -= count;
              if(!data->skip) {
                  stream->wrNext = stream->stop = stream->rdNext + count;
--- 1683,1691 ----
           * more content bytes, deliver all that are present in data->buff.
           */
          if(data->contentLen > 0) {
+             ptrDiff = data->buffStop - stream->rdNext;
+             ASSERT(0 <= ptrDiff && ptrDiff <= INT_MAX);
+             count = min(data->contentLen, (int)ptrDiff);
              data->contentLen -= count;
              if(!data->skip) {
                  stream->wrNext = stream->stop = stream->rdNext + count;
*************** static void FillBuffProc(FCGX_Stream *stream)
*** 1668,1674 ****
           * the client) was padded, skip over the padding bytes.
           */
          if(data->paddingLen > 0) {
-             count = min(data->paddingLen, data->buffStop - stream->rdNext);
              data->paddingLen -= count;
              stream->rdNext += count;
              if(data->paddingLen > 0) {
--- 1704,1712 ----
           * the client) was padded, skip over the padding bytes.
           */
          if(data->paddingLen > 0) {
+             ptrDiff = data->buffStop - stream->rdNext;
+             ASSERT(0 <= ptrDiff && ptrDiff <= INT_MAX);
+             count = min(data->paddingLen, (int)ptrDiff);
              data->paddingLen -= count;
              stream->rdNext += count;
              if(data->paddingLen > 0) {
*************** static void FillBuffProc(FCGX_Stream *stream)
*** 1687,1694 ****
          /*
           * Fill header with bytes from the input buffer.
           */
          count = min((int)sizeof(header) - headerLen,
-                         data->buffStop - stream->rdNext);
          memcpy(((char *)(&header)) + headerLen, stream->rdNext, count);
          headerLen += count;
          stream->rdNext += count;
--- 1725,1734 ----
          /*
           * Fill header with bytes from the input buffer.
           */
+         ptrDiff = data->buffStop - stream->rdNext;
+         ASSERT(0 <= ptrDiff && ptrDiff <= INT_MAX);
          count = min((int)sizeof(header) - headerLen,
+                     (int)ptrDiff);
          memcpy(((char *)(&header)) + headerLen, stream->rdNext, count);
          headerLen += count;
          stream->rdNext += count;
*************** static void FillBuffProc(FCGX_Stream *stream)
*** 1756,1761 ****
  static FCGX_Stream *NewStream(
          FCGX_Request *reqDataPtr, int bufflen, int isReader, int streamType)
  {
      /*
       * XXX: It would be a lot cleaner to have a NewStream that only
       * knows about the type FCGX_Stream, with all other
--- 1796,1802 ----
  static FCGX_Stream *NewStream(
          FCGX_Request *reqDataPtr, int bufflen, int isReader, int streamType)
  {
+     intptr_t bufflen_p;
      /*
       * XXX: It would be a lot cleaner to have a NewStream that only
       * knows about the type FCGX_Stream, with all other
*************** static FCGX_Stream *NewStream(
*** 1767,1773 ****
      FCGX_Stream *stream = (FCGX_Stream *)Malloc(sizeof(FCGX_Stream));
      FCGX_Stream_Data *data = (FCGX_Stream_Data *)Malloc(sizeof(FCGX_Stream_Data));
      data->reqDataPtr = reqDataPtr;
-     bufflen = AlignInt8(min(max(bufflen, 32), FCGI_MAX_LENGTH + 1));
      data->bufflen = bufflen;
      data->mBuff = (unsigned char *)Malloc(bufflen);
      data->buff = AlignPtr8(data->mBuff);
--- 1808,1816 ----
      FCGX_Stream *stream = (FCGX_Stream *)Malloc(sizeof(FCGX_Stream));
      FCGX_Stream_Data *data = (FCGX_Stream_Data *)Malloc(sizeof(FCGX_Stream_Data));
      data->reqDataPtr = reqDataPtr;
+     bufflen_p = AlignInt8(min(max(bufflen, 32), FCGI_MAX_LENGTH + 1));
+     ASSERT(0 <= bufflen_p && bufflen_p <= INT_MAX);
+     bufflen = (int)bufflen_p;
      data->bufflen = bufflen;
      data->mBuff = (unsigned char *)Malloc(bufflen);
      data->buff = AlignPtr8(data->mBuff);
*************** void FCGX_SetExitStatus(int status, FCGX_Stream *stream)
*** 2310,2316 ****
      data->reqDataPtr->appStatus = status;
  }
  
- 
  int 
  FCGX_Attach(FCGX_Request * r)
  {
--- 2353,2358 ----
      data->reqDataPtr->appStatus = status;
  }
  
  int 
  FCGX_Attach(FCGX_Request * r)
  {
